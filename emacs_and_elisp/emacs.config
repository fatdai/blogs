;;==================================================
;; 自定义常用快捷键
;; M-w  复制一行(区域)
;; C-w  剪切一行(区域)
;; F7   自动格式化代码
;; C-o  在下一行插入
;; C-S-o 在上一行插入
;; C-c Space 各种跳转
;; M-num 在各个窗口间跳转
;; C-z  快速选中
;;**************************************************
;; 自带的常用快捷键
;; M-< 跳转到文件开头
;; M-> 跳转到文件结尾
;; C-x b 选择buffer
;; C-x k 关闭buffer
;; C-h f 查看函数文档
;; C-h k 查看快捷键对应的命令
;; C-h w 查看命令对应的快捷键
;; winner-mode 启用后:
;;    C-c left  winner-undo
;;    C-c right winner-redo
;;==================================================
;; 基本设置
;;==================================================
(setq default-major-mode 'text-mode) ;;把文本模式设置成默认的主模式
(add-hook 'text-mode-hook 'turn-on-auto-fill) ;; 只要在文件模式里,就启用自动换行
(setq make-backup-files nil)  ;; 禁止自动产生备份
(setq-default transient-mark-mode t) ;; 自动启用临时标记,被mark的部分会高亮
(global-linum-mode t)  ;; 显示行号
(set-default-font "monaco-14")  ;; 设置字体
(tool-bar-mode 0)      ;; 隐藏工具栏
(scroll-bar-mode 0)    ;; 隐藏滚动条
;;粘贴于光标处,而不是鼠标指针处  
(setq mouse-yank-at-point t)
(display-time-mode 1);;启用时间显示设置，在minibuffer上面的那个杠上  
(setq display-time-24hr-format t);;时间使用24小时制  
;;(setq display-time-day-and-date t);;时间显示包括日期和具体时间
;;显示标题栏 %f 缓冲区完整路径 %p 页面百分数 %l 行号  
(setq frame-title-format "%f")
;;显示列号  
(setq column-number-mode t)  

;; 加载 theme
(load-theme 'wombat)

;; 启用内置的 winner-mode
(winner-mode 1)

;;==================================================
;; 我自定义的一些函数,暂时先都写在这里

;;; 实现类似 vim 里面的 O 和 o 
(defun newline-above-current()
  "Add a line above current line like vim O."
  (interactive)
  (progn (beginning-of-line)
	 (open-line 1)
	 (indent-according-to-mode)))

(defun newline-next-current()
  "Add a line next current line like vim o."
  (interactive)
  (progn (end-of-line)
	 (newline-and-indent)))

(global-set-key (kbd "C-o") 'newline-next-current)
(global-set-key (kbd "C-S-o") 'newline-above-current)

;; 另外，我在这三个函数中都使用back-to-indentation来移动到行首，可以把行首的 
;; 空白排除在外，不喜欢的话可以改成move-beginning-of-line. 
;;;; 实现快速选中一行多行
(defun yp-mark-line (&optional arg) 
  (interactive "P") 
  (if (region-active-p) 
      (progn 
        (goto-char (line-end-position 2))) 
    (progn 
      (back-to-indentation) 
      (set-mark (point)) 
      (goto-char (line-end-position)))) 
  (setq arg (if arg (prefix-numeric-value arg) 
              (if (< (mark) (point)) -1 1))) 
  (if (and arg (> arg 1)) 
      (progn 
        (goto-char (line-end-position arg)))))

(global-set-key (kbd "C-z") 'yp-mark-line) 

;;; 不需要选中的 复制和剪切
(defun yp-copy (&optional arg) 
  "switch action by whether mark is active" 
  (interactive "P") 
  (if mark-active 
      (kill-ring-save (region-beginning) (region-end)) 
    (let ((beg (progn (back-to-indentation) (point)))  
          (end (line-end-position arg))) 
      (copy-region-as-kill beg end)))) 

(defun yp-kill (&optional arg) 
  "switch action by whether mark is active" 
  (interactive "P") 
  (if mark-active 
      (kill-region (region-beginning) (region-end)) 
    (kill-whole-line arg))) 

(global-set-key (kbd "M-w") 'yp-copy) 
(global-set-key (kbd "C-w") 'yp-kill) 

;;; 格式化代码,为了方便,绑定到F7键
(defun indent-buffer ()
  "Indent the whole buffer."
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)))
(global-set-key [f7] 'indent-buffer)



;;==================================================
;; org-mode
;;==================================================
(setq org-startup-indented t) ;; 打开org文件默认都indent,切换的命令为 M-x org-indent-mode

;; org模式下默认没有自动换行
(add-hook 'org-mode-hook (lambda()(setq truncate-lines nil))) 




;;==================================================
;;;;;;;;; el-get start;;;;;;;;;;;;;;;;;;;;
;; 具体查看: https://github.com/dimitri/el-get
;; 常用命令:
;;  M-x el-get-install
;;  M-x el-get-remove
;;  M-x el-get-reinstall
;;  M-x el-get-self-update
;;  M-x el-get-update
;;  M-x el-get-update-all 等等
;;  M-x el-get-list-packages  查看所有的包
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)
;;;;;;;;; el-get end;;;;;;;;;;;;;;;;;;;;

;;==================================================
;; smex : 命令的提示
;;; 使用 C-s/C-r切换 Return 确定
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

;;==================================================
;; helm : 也是各种提示 
(helm-mode 1)

;;==================================================
;; auto-pair : 自动不全括号
(autopair-global-mode)

;;==================================================
;; ace-jump-mode : 各种跳转
;; 绑定到快捷键 C-c Space
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;;==================================================
;; exec-path-from-shell : 使用 zsh shell
;;让 emacs 里面使用的是 zsh shell
(let ((path (shell-command-to-string ". ~/.zshrc; echo -n $PATH")))
  (setenv "PATH" path)
  (setq exec-path 
        (append
         (split-string-and-unquote path ":")
         exec-path)))

;;==================================================
;; window-numbering : 方便在 各个window 中跳转
;; M-num  在各个窗口间跳转
(window-numbering-mode 1)

;;==================================================
;; company-mode : 自动补全的神器
(add-hook 'after-init-hook 'global-company-mode)

;;==================================================
;; yasnippet : 补全代码片段
(yas-global-mode 1)
